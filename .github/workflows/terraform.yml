name: "Terraform"

on:
    workflow_dispatch:
        inputs:
            tf.vars_files:
                description: "Path to the .tfvars file"
                required: true
                default: "variables.tfvars"
        actions:
            description: "Apply or destroy terraform resources"
            type: choice
            options:
                - plan
                - apply
                - destroy
            default: "apply"

env:
    AWS_REGION: ap-south-1
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

permissions:
    contents: read

jobs:

    Checkout-Repo:
        name: "Checkout Repo"
        runs-on: ubuntu-latest
        Environment: production 
        defaults:
            run:
                shell: bash
                working-directory: ./eks

env:
    AWS_REGION: ap-south-1
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

steps:
    - name: Checkout
      uses: actions/checkout@v3

    Setting-up-Terraform:
        runs-on: ubuntu-latest

        needs: Checkout-Repo

        steps:
        #Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1
          with:
            terraform_version: 1.8.4
            terraform_wrapper: false

    #Initialize a new or existing Terraform working directory by creating initial files, downloading remote state files and working with Terraform modules

    Terraform-Initializing:
        name: "Terraform Initializing"
        runs-on: ubuntu-latest
        needs: [Checkout-Repo, Setting-up-Terraform]

        steps:
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1
          with:
            terraform_version: 1.8.4
          
        - name: Checkout Repo
          uses: actions/checkout@v3

    #Initialize a new or existing Terraform working directory by creating initial files, downloading remote state files and working with Terraform modules

        - name: Terraform Init
          working-directory: ./eks
          run: terraform init

    Terraform-Formating-and-Validation:
        name: "Terraform Formating and Validation"
        runs-on: ubuntu-latest
        needs: [Checkout-Repo, Setting-up-Terraform, Terraform-Initializing]

        steps:
            - name: Checkout Repo
              uses: actions/checkout@v3

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v1
              with:
                terraform_version: 1.8.4

            - name: Terraform Init
              working-directory: ./eks
              run: terraform init

            - name: Terraform Format
              working-directory: ./eks
              run: terraform fmt

            - name: Terraform Validate
              working-directory: ./eks
              run: terraform validate

    Terraform-Action:
        name: "Terraform Action"
        runs-on: ubuntu-latest
        needs: [Checkout-Repo, Setting-up-Terraform, Terraform-Initializing, Terraform-Formating-and-Validation]

        steps:
            - name: Checkout Repo
              uses: actions/checkout@v3

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v1
              with:
                terraform_version: 1.8.4

            - name: Terraform Init
              working-directory: ./eks
              run: terraform init

            
            - name: Terraform Plan
              working-directory: ./eks
              if: github.event.inputs.actions == 'plan'
              run: terraform plan
              #Generate an execution plan and show it in the GitHub UI
              run:
                terraform plan -vars-file=${{ github.event.inputs.tf_vars_files }} -input=false

            
             #Apply the terraform configuration according to the parameters
            - name: Terraform Action
              
              if: ${{ github.event.inputs.actions == 'apply' }}
              working-directory: ./eks
              run: terraform ${github.event.inputs.actions} -auto-approve -vars-file=${{ github.event.inputs.tf_vars_files }} -input=false


            - name: Terraform Destroy
              if: ${{ github.event.inputs.actions == 'destroy' }}
              working-directory: ./eks
              run: terraform ${github.event.inputs.actions} -auto-approve -vars-file=${{ github.event.inputs.tf_vars_files }} -input=false






